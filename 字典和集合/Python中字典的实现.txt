1、Python中dict使用散列表进行存储，因此其键必须是可hash的，散列表的每一个单元我们可以称为表元，若不为空，则存储key:value

2、在创建一个dict时，Python会创建一个散列表，随着不断插入key：value，有可能需要进行字典扩容，开辟一个更大的散列表，此时需要重新计算，可能导致新的散列冲突。

2、在进行查找my_dict[search_key]时，首先通过hash(search_key)得到一个hash值，判断该hash值对应的地址，若为空，则表明没有找到，若不为空，则判断表元中的key和search_key是否相同，若相同，则返回表元中的value，若不相同，则可能是发生了散列冲突。根据散列冲突的解决方案继续查找下一个地址，直到找到或者地址内容为空为止

3、那么使用散列表给dict带来了什么优势和限制呢？
（1）键必须是可散列的
（2）字典在内存中开销巨大
（3）键查询很快
（4）键的次序取决于添加次序
（5）往字典里添加新键可能会改变已有键的顺序